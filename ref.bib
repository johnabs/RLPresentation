@article{downingReinforcedGeneticProgramming2001,
  title = {Reinforced {{Genetic Programming}}},
  author = {Downing, Keith L.},
  year = {2001},
  month = sep,
  journal = {Genetic Programming and Evolvable Machines},
  volume = {2},
  number = {3},
  pages = {259--288},
  issn = {1573-7632},
  doi = {10.1023/A:1011953410319},
  urldate = {2023-10-22},
  abstract = {This paper introduces the Reinforced Genetic Programming (RGP) system, which enhances standard tree-based genetic programming (GP) with reinforcement learning (RL). RGP adds a new element to the GP function set: monitored action-selection points that provide hooks to a reinforcement-learning system. Using strong typing, RGP can restrict these choice points to leaf nodes, thereby turning GP trees into classify-and-act procedures. Then, environmental reinforcements channeled back through the choice points provide the basis for both lifetime learning and general GP fitness assessment. This paves the way for evolutionary acceleration via both Baldwinian and Lamarckian mechanisms. In addition, the hybrid hints of potential improvements to RL by exploiting evolution to design proper abstraction spaces, via the problem-state classifications of the internal tree nodes. This paper details the basic mechanisms of RGP and demonstrates its application on a series of static and dynamic maze-search problems.},
  langid = {english},
  keywords = {genetic programming,Lamarckism,reinforcement learning,the Baldwin Effect},
  file = {/home/johnbs/Documents/Zotero/storage/S3BIDCAC/Downing_2001_Reinforced Genetic Programming.pdf}
}

@article{heinInterpretablePoliciesReinforcement2018a,
  title = {Interpretable Policies for Reinforcement Learning by Genetic Programming},
  author = {Hein, Daniel and Udluft, Steffen and Runkler, Thomas A.},
  year = {2018},
  month = nov,
  journal = {Engineering Applications of Artificial Intelligence},
  volume = {76},
  pages = {158--169},
  issn = {0952-1976},
  doi = {10.1016/j.engappai.2018.09.007},
  urldate = {2023-10-22},
  abstract = {The search for interpretable reinforcement learning policies is of high academic and industrial interest. Especially for industrial systems, domain experts are more likely to deploy autonomously learned controllers if they are understandable and convenient to evaluate. Basic algebraic equations are supposed to meet these requirements, as long as they are restricted to an adequate complexity. Here we introduce the genetic programming for reinforcement learning (GPRL) approach based on model-based batch reinforcement learning and genetic programming, which autonomously learns policy equations from pre-existing default state\textendash action trajectory samples. GPRL is compared to a straightforward method which utilizes genetic programming for symbolic regression, yielding policies imitating an existing well-performing, but non-interpretable policy. Experiments on three reinforcement learning benchmarks, i.e., mountain car, cart\textendash pole balancing, and industrial benchmark, demonstrate the superiority of our GPRL approach compared to the symbolic regression method. GPRL is capable of producing well-performing interpretable reinforcement learning policies from pre-existing default trajectory data.},
  keywords = {Genetic programming,Industrial benchmark,Interpretable,Model-based,Reinforcement learning,Symbolic regression},
  file = {/home/johnbs/Documents/Zotero/storage/TPGHMX2X/Hein et al_2018_Interpretable policies for reinforcement learning by genetic programming.pdf}
}

@inproceedings{huangBridgingFormalMethods2022,
  title = {Bridging {{Formal Methods}} and~{{Machine Learning}} with~{{Global Optimisation}}},
  booktitle = {Formal {{Methods}}  and {{Software Engineering}}},
  author = {Huang, Xiaowei and Ruan, Wenjie and Tang, Qiyi and Zhao, Xingyu},
  editor = {Riesco, Adrian and Zhang, Min},
  year = {2022},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {1--19},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-031-17244-1_1},
  abstract = {Formal methods and machine learning are two research fields with drastically different foundations and philosophies. Formal methods utilise mathematically rigorous techniques for the specification, development and verification of software and hardware systems. Machine learning focuses on pragmatic approaches to gradually improve a parameterised model by observing a training data set. While historically the two fields lack communication, this trend has changed in the past few years with an outburst of research interest in the robustness verification of neural networks. This paper will briefly review these works, and focus on the urgent need for broader, and more in-depth, communication between the two fields, with the ultimate goal of developing learning-enabled systems with not only excellent performance but also acceptable safety and security. We present a specification language, MLS\$\$\^2\$\$, and show that it can express a set of known safety and security properties, including generalisation, uncertainty, robustness, data poisoning, backdoor, model stealing, membership inference, model inversion, interpretability, and fairness. To verify MLS\$\$\^2\$\$properties, we promote the global optimisation based methods, which have provable guarantees on the convergence to the optimal solution. Many of them have theoretical bounds on the gap between current solutions and the optimal solution.},
  isbn = {978-3-031-17244-1},
  langid = {english},
  keywords = {Formal methods,Global optimisation,Machine learning},
  file = {/home/johnbs/Documents/Zotero/storage/8EFRUMUK/Huang et al_2022_Bridging Formal Methods and Machine Learning with Global Optimisation.pdf}
}

@article{kaufmannPreciseDescriptionACL2,
  title = {A {{Precise Description}} of the {{ACL2 Logic}}},
  author = {Kaufmann, Matt and Moore, J Strother},
  abstract = {The ACL2 logic is a rst-order, essentially quanti er-free logic of total recursive functions providing mathematical induction and several extension principles, including symbol package de nition and recursive function de nition. In this document we describe the logic more precisely.},
  langid = {english},
  file = {/home/johnbs/Documents/Zotero/storage/L4DCZPUI/Kaufmann and Moore - A Precise Description of the ACL2 Logic.pdf}
}

@inproceedings{krichenAreFormalMethods2022,
  title = {Are {{Formal Methods Applicable To Machine Learning And Artificial Intelligence}}?},
  booktitle = {2022 2nd {{International Conference}} of {{Smart Systems}} and {{Emerging Technologies}} ({{SMARTTECH}})},
  author = {Krichen, Moez and Mihoub, Alaeddine and Alzahrani, Mohammed Y. and Adoni, Wilfried Yves Hamilton and Nahhal, Tarik},
  year = {2022},
  month = may,
  pages = {48--53},
  doi = {10.1109/SMARTTECH54121.2022.00025},
  urldate = {2023-10-22},
  abstract = {Formal approaches can provide strict correctness guarantees for the development of both hardware and software systems. In this work, we examine state-of-the-art formal methods for the verification and validation of machine learning systems in particular. We first provide a brief summary of existing formal approaches in general. After that, we report on formal methods developed for validating data preparation and training phases. Then, we go over the formal methods used for the verification of machine learning systems. At this level, we consider both partial and exhaustive techniques. In addition, we review research works dedicated to the verification of support vector machines and decision tree ensembles. Finally, we propose several potential future directions for formal verification of machine learning systems.},
  file = {/home/johnbs/Documents/Zotero/storage/IWIJAULD/Krichen et al_2022_Are Formal Methods Applicable To Machine Learning And Artificial Intelligence.pdf}
}

@inproceedings{larsenFormalMethodsMeet2022,
  title = {Formal {{Methods Meet Machine Learning}} ({{F3ML}})},
  booktitle = {Leveraging {{Applications}} of {{Formal Methods}}, {{Verification}} and {{Validation}}. {{Adaptation}} and {{Learning}}},
  author = {Larsen, Kim and Legay, Axel and Nolte, Gerrit and Schl{\"u}ter, Maximilian and Stoelinga, Marielle and Steffen, Bernhard},
  editor = {Margaria, Tiziana and Steffen, Bernhard},
  year = {2022},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {393--405},
  publisher = {{Springer Nature Switzerland}},
  address = {{Cham}},
  doi = {10.1007/978-3-031-19759-8_24},
  abstract = {The field of machine learning focuses on computationally efficient, yet approximate algorithms. On the contrary, the field of formal methods focuses on mathematical rigor and provable correctness. Despite their superficial differences, both fields offer mutual benefit. Formal methods offer methods to verify and explain machine learning systems, aiding their adoption in safety critical domains. Machine learning offers approximate, computationally efficient approaches that let formal methods scale to larger problems. This paper gives an introduction to the track ``Formal Methods Meets Machine Learning'' (F3ML) and shortly presents its scientific contributions, structured into two thematic subthemes: One, concerning formal methods based approaches for the explanation and verification of machine learning systems, and one concerning the employment of machine learning approaches to scale formal methods.},
  isbn = {978-3-031-19759-8},
  langid = {english},
  file = {/home/johnbs/Documents/Zotero/storage/PCS4F96H/Larsen et al_2022_Formal Methods Meet Machine Learning (F3ML).pdf}
}

@article{mundhenkSymbolicRegressionNeuralGuided,
  title = {Symbolic {{Regression}} via {{Neural-Guided Genetic Programming Population Seeding}}},
  author = {Mundhenk, T Nathan and Landajuela, Mikel and Glatt, Ruben and Santiago, Claudio P and Faissol, Daniel M and Petersen, Brenden K},
  abstract = {Symbolic regression is the process of identifying mathematical expressions that fit observed output from a black-box process. It is a discrete optimization problem generally believed to be NP-hard. Prior approaches to solving the problem include neural-guided search (e.g. using reinforcement learning) and genetic programming. In this work, we introduce a hybrid neural-guided/genetic programming approach to symbolic regression and other combinatorial optimization problems. We propose a neural-guided component used to seed the starting population of a random restart genetic programming component, gradually learning better starting populations. On a number of common benchmark tasks to recover underlying expressions from a dataset, our method recovers 65\% more expressions than a recently published top-performing model using the same experimental setup. We demonstrate that running many genetic programming generations without interdependence on the neural-guided component performs better for symbolic regression than alternative formulations where the two are more strongly coupled. Finally, we introduce a new set of 22 symbolic regression benchmark problems with increased difficulty over existing benchmarks. Source code is provided at www.github.com/brendenpetersen/deep-symbolic-optimization.},
  langid = {english},
  file = {/home/johnbs/Documents/Zotero/storage/WSA8Q55U/Mundhenk et al. - Symbolic Regression via Neural-Guided Genetic Prog.pdf}
}

@article{nianReviewReinforcementLearning2020,
  title = {A Review {{On}} Reinforcement Learning: {{Introduction}} and Applications in Industrial Process Control},
  shorttitle = {A Review {{On}} Reinforcement Learning},
  author = {Nian, Rui and Liu, Jinfeng and Huang, Biao},
  year = {2020},
  month = aug,
  journal = {Computers \& Chemical Engineering},
  volume = {139},
  pages = {106886},
  issn = {0098-1354},
  doi = {10.1016/j.compchemeng.2020.106886},
  urldate = {2023-10-20},
  abstract = {In recent years, reinforcement learning (RL) has attracted significant attention from both industry and academia due to its success in solving some complex problems. This paper provides an overview of RL along with tutorials for practitioners who are interested in implementing RL solutions into process control applications. The paper starts by providing an introduction to different reinforcement learning algorithms. Then, recent successes of RL applications across different industries will be explored, with more emphasis on process control applications. A detailed RL implementation example will also be shown. Afterwards, RL will be compared with traditional optimal control methods, in terms of stability and computational complexity among other factors, and the current shortcomings of RL will be introduced. This paper is concluded with a summary of RL's potential advantages and disadvantages.},
  keywords = {Machine learning,Model predictive control,Optimal control,Process control,Process industry,Reinforcement learning},
  file = {/home/johnbs/Documents/Zotero/storage/29PMJQJC/Nian et al_2020_A review On reinforcement learning.pdf}
}

@article{SurveyGeneticProgramming2019,
  title = {A {{Survey}} of {{Genetic Programming}} and {{Its Applications}}},
  year = {2019},
  month = apr,
  journal = {KSII Transactions on Internet and Information Systems},
  volume = {13},
  number = {4},
  issn = {19767277},
  doi = {10.3837/tiis.2019.04.002},
  urldate = {2023-10-20},
  abstract = {Genetic Programming (GP) is an intelligence technique whereby computer programs are encoded as a set of genes which are evolved utilizing a Genetic Algorithm (GA). In other words, the GP employs novel optimization techniques to modify computer programs; imitating the way humans develop programs by progressively re-writing them for solving problems automatically. Trial programs are frequently altered in the search for obtaining superior solutions due to the base is GA. These are evolutionary search techniques inspired by biological evolution such as mutation, reproduction, natural selection, recombination, and survival of the fittest. The power of GAs is being represented by an advancing range of applications; vector processing, quantum computing, VLSI circuit layout, and so on. But one of the most significant uses of GAs is the automatic generation of programs. Technically, the GP solves problems automatically without having to tell the computer specifically how to process it. To meet this requirement, the GP utilizes GAs to a ``population'' of trial programs, traditionally encoded in memory as tree-structures. Trial programs are estimated using a ``fitness function'' and the suited solutions picked for re-evaluation and modification such that this sequence is replicated until a ``correct'' program is generated. GP has represented its power by modifying a simple program for categorizing news stories, executing optical character recognition, medical signal filters, and for target identification, etc. This paper reviews existing literature regarding the GPs and their applications in different scientific fields and aims to provide an easy understanding of various types of GPs for beginners.},
  langid = {english},
  file = {/home/johnbs/Documents/Zotero/storage/6MPLSKWX/2019 - A Survey of Genetic Programming and Its Applicatio.pdf}
}

@misc{SymbolicRegressionMethods,
  title = {Symbolic {{Regression Methods}} for {{Reinforcement Learning}} | {{IEEE Journals}} \& {{Magazine}} | {{IEEE Xplore}}},
  urldate = {2023-10-22},
  howpublished = {https://ieeexplore-ieee-org.ezproxy.lib.purdue.edu/abstract/document/9565900}
}

@misc{urbanReviewFormalMethods2021,
  title = {A {{Review}} of {{Formal Methods}} Applied to {{Machine Learning}}},
  author = {Urban, Caterina and Min{\'e}, Antoine},
  year = {2021},
  month = apr,
  number = {arXiv:2104.02466},
  eprint = {2104.02466},
  primaryclass = {cs},
  publisher = {{arXiv}},
  doi = {10.48550/arXiv.2104.02466},
  urldate = {2023-10-22},
  abstract = {We review state-of-the-art formal methods applied to the emerging field of the verification of machine learning systems. Formal methods can provide rigorous correctness guarantees on hardware and software systems. Thanks to the availability of mature tools, their use is well established in the industry, and in particular to check safety-critical applications as they undergo a stringent certification process. As machine learning is becoming more popular, machine-learned components are now considered for inclusion in critical systems. This raises the question of their safety and their verification. Yet, established formal methods are limited to classic, i.e. non machine-learned software. Applying formal methods to verify systems that include machine learning has only been considered recently and poses novel challenges in soundness, precision, and scalability. We first recall established formal methods and their current use in an exemplar safety-critical field, avionic software, with a focus on abstract interpretation based techniques as they provide a high level of scalability. This provides a golden standard and sets high expectations for machine learning verification. We then provide a comprehensive and detailed review of the formal methods developed so far for machine learning, highlighting their strengths and limitations. The large majority of them verify trained neural networks and employ either SMT, optimization, or abstract interpretation techniques. We also discuss methods for support vector machines and decision tree ensembles, as well as methods targeting training and data preparation, which are critical but often neglected aspects of machine learning. Finally, we offer perspectives for future research directions towards the formal verification of machine learning systems.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Logic in Computer Science,Computer Science - Machine Learning,Computer Science - Programming Languages},
  file = {/home/johnbs/Documents/Zotero/storage/VF3C28CH/Urban_Mine_2021_A Review of Formal Methods applied to Machine Learning.pdf}
}

@article{woodcockFormalMethodsPractice2009,
  title = {Formal Methods: {{Practice}} and Experience},
  shorttitle = {Formal Methods},
  author = {Woodcock, Jim and Larsen, Peter Gorm and Bicarregui, Juan and Fitzgerald, John},
  year = {2009},
  month = oct,
  journal = {ACM Computing Surveys},
  volume = {41},
  number = {4},
  pages = {1--36},
  issn = {0360-0300, 1557-7341},
  doi = {10.1145/1592434.1592436},
  urldate = {2023-10-20},
  abstract = {Formal methods use mathematical models for analysis and verification at any part of the program life-cycle. We describe the state of the art in the industrial use of formal methods, concentrating on their increasing use at the earlier stages of specification and design. We do this by reporting on a new survey of industrial use, comparing the situation in 2009 with the most significant surveys carried out over the last 20 years. We describe some of the highlights of our survey by presenting a series of industrial projects, and we draw some observations from these surveys and records of experience. Based on this, we discuss the issues surrounding the industrial adoption of formal methods. Finally, we look to the future and describe the development of a Verified Software Repository, part of the worldwide Verified Software Initiative. We introduce the initial projects being used to populate the repository, and describe the challenges they address.},
  langid = {english},
  file = {/home/johnbs/Documents/Zotero/storage/ANXMIQQY/Woodcock et al. - 2009 - Formal methods Practice and experience.pdf}
}
